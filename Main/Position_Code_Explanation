from zaber_motion import Units, Library
from zaber_motion.ascii import Connection
from Trigger_InProcess_Input import microswitch #code to enable microwitch - InProcess measurement trigger
from Trigger_InProcess_Output import fire_signal #code for SQL data extraction after InProcess measurement was done

Library.enable_device_db_store()

with Connection.open_serial_port("COM7") as connection:
    device_list = connection.detect_devices()
    print("Found {} devices".format(len(device_list)))

    device1 = device_list[0]
    device2 = device_list[1]

    axis_1 = device1.get_axis(1)  # get axis (1 out of 1) for device_1
    axis_2 = device2.get_axis(1)  # get axis (1 out of 1) for device_2


    class Axis:
        def __init__(self, axis, position=0):
            self.axis = axis
            self.position = position

        def __mul__(self):
            zaber_position = self.position * 8063.0   #when Zaber system is asked about position, it will print a value which is 8063 * atual position
            return zaber_position

        def __eq__(self):
            return True if self.axis.get_position() == self.position * 8063.0 else False  #boolean for position check

        def place_on_sample(self):
            self.axis.move_absolute(self.position, Units.LENGTH_MILLIMETRES, wait_until_idle=True)

        def place_off_sample(self): #not used in this code, because zaber package provides home.all. If homing of selected axes is desired, this function might be the proper choice.
            self.axis.home(wait_until_idle=False)

        def park(self): #parking function allows to park the axes before when turning the system off and secure the predefined axes position.
            self.axis.park()

        def unpark(self): #unpark axes after truning device on again
            self.axis.unpark()


    def homing(): #home all axes and test three times if homed.
        for i in range(0, 2):
            if connection.home_all(wait_until_idle=True):  # home all devices or, alternatively, use same approach as for placing: for axis in axes_posn: axis.place_off_sample()
                print("Axes are homed")
                #break if you are happy after one succesful homing message instead of three
            else:
                connection.home_all(wait_until_idle=True)



    def placing(axes_posn): #allows you to place axes or sample holder respectively to desired place
        for i in range(0, 3):
            if all(axis.__eq__() is True for axis in axes_posn): #checking three times if the axes are at right position after positioning them in selse staement ('axis.place_on_sample()')
                for axis in axes_posn:
                    axis.park()
                    print("Sample is placed")
            else:
                for axis in axes_posn:
                    axis.place_on_sample()
                    axis.park()


    def unparking(axes_posn):
        for axis in axes_posn: axis.unpark


    # Define your axes and their 1st position:
    axis1_pos1 = Axis(axis_1, 50)
    axis2_pos1 = Axis(axis_2, 50)
    # Creating lists of axes in their 1st position
    axes_pos1 = [axis1_pos1, axis2_pos1]
    # # other lists can follow with subsequent positions: pos2, pos3, ...

    homing()
    placing(axes_pos1)
    #unpark not necessary if next movement is homing

microswitch() # after checking our axes position through the zaber system, we start the microswitch code.
fire_signal('InProcess Test', 'Transmission') #senidng SQL reults to Python 
